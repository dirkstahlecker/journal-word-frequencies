[{"/Users/dirkstahlecker/programming/journal-word-frequencies/client/src/index.tsx":"1","/Users/dirkstahlecker/programming/journal-word-frequencies/client/src/App.tsx":"2","/Users/dirkstahlecker/programming/journal-word-frequencies/client/src/JournalReader.tsx":"3","/Users/dirkstahlecker/programming/journal-word-frequencies/client/src/Markup.tsx":"4"},{"size":503,"mtime":1608506471474,"results":"5","hashOfConfig":"6"},{"size":2798,"mtime":1609271612787,"results":"7","hashOfConfig":"6"},{"size":2546,"mtime":1609269301579,"results":"8","hashOfConfig":"6"},{"size":2060,"mtime":1609269477087,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},"ub9bi7",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"13"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"13"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/dirkstahlecker/programming/journal-word-frequencies/client/src/index.tsx",["22"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n",["23","24"],"/Users/dirkstahlecker/programming/journal-word-frequencies/client/src/App.tsx",["25"],"import React from 'react';\nimport './App.css';\nimport {observer} from \"mobx-react\";\nimport {makeObservable, observable, runInAction} from \"mobx\";\nimport { JournalReader, JournalReaderMachine } from './JournalReader';\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\nimport 'react-tabs/style/react-tabs.css';\n\nexport class AppMachine\n{\n  @observable testData: any = null;\n\n  public journalReaderMachine: JournalReaderMachine = new JournalReaderMachine();\n\n  constructor()\n  {\n    makeObservable(this);\n  }\n}\n\nexport interface AppProps\n{\n\n}\n\n@observer\nclass App extends React.Component<AppProps>\n{\n  private machine: AppMachine = new AppMachine();\n\n  // private async fetchData(): Promise<void>\n  // {\n  //   const testDataRaw = await fetch('/test');\n  //   const td = await testDataRaw.json();\n\n  //   runInAction(() => this.machine.testData = td.message);\n  // }\n\n  componentDidMount()\n  {\n    // this.fetchData();\n  }\n\n  render()\n  {\n    return <div className=\"App\">\n      <span style={{width: \"100%\", height: \"100%\", display: \"inline-block\", verticalAlign: \"top\"}}\n            tabIndex={0}\n            id=\"mainApp\"\n      >\n        <Tabs>\n          <TabList>\n            <Tab>\n              Write\n            </Tab>\n            <Tab>\n              Read\n            </Tab>\n            <Tab>\n              Add Markup\n            </Tab>\n            <Tab>\n              Stats\n            </Tab>\n            <Tab>\n              Graph Testing\n            </Tab>\n          </TabList>\n\n          <TabPanel>\n            {/* <JournalWriter machine={this.props.machine.journalWriterMachine}/> */}\n          </TabPanel>\n          <TabPanel>\n            <JournalReader machine={this.machine.journalReaderMachine}/>\n          </TabPanel>\n          <TabPanel>\n            <div onKeyDown={(e: any) => {\n              if (e.key === \"Enter\")\n              {\n                e.preventDefault();\n                // this.machine.handleEasyMarkupGeneratorSubmit();\n              }\n            }}>\n              First Name: <input type=\"text\" id=\"firstName\" autoFocus={true}/>\n              <br />\n              Last Name: <input type=\"text\" id=\"lastName\" />\n              <br />\n              Display Name: <input type=\"text\" id=\"displayName\" />\n              <br />\n              {/* <button onClick={this.machine.handleEasyMarkupGeneratorSubmit}>Submit</button> */}\n              <br />\n              <br />\n              <div id=\"displayCopyArea\">\n                <input id=\"placeToSelectText\" />\n              </div>\n            </div>\n          </TabPanel>\n          <TabPanel>\n            {/* <Stats\n              machine={new StatsMachine(\"TODO\")}\n            /> */}\n          </TabPanel>\n          <TabPanel>\n\n          </TabPanel>\n        </Tabs>\n\n      </span>\n    </div>\n  }\n}\n\nexport default App;\n","/Users/dirkstahlecker/programming/journal-word-frequencies/client/src/JournalReader.tsx",["26","27"],"import * as React from \"react\";\n// import {NameReference} from \"./NameReference\";\nimport {observable, action, makeObservable} from \"mobx\";\nimport {observer} from \"mobx-react\";\nimport {MarkupUtils} from \"./MarkupUtils\";\nimport {Markup} from \"./Markup\";\nimport \"./JournalReader.css\";\n\nexport interface JournalReaderProps\n{\n\tmachine: JournalReaderMachine;\n}\n\nexport class JournalReaderMachine\n{\n\tprivate static DATE_REGEX = /\\d{1,2}-\\d{1,2}-\\d{1,2}:/;\n\n\t@observable public rawText: string = \"\";\n\n\tconstructor()\n\t{\n\t\tmakeObservable(this);\n\t}\n\n\t@action\n\tpublic updateRawText(value: string): void\n\t{\n\t\tthis.rawText = value; // = this.replaceMarkupWithDisplayName(value);\n\t}\n\n\tpublic static isDate(piece: string): boolean\n\t{\n\t\treturn JournalReaderMachine.DATE_REGEX.test(piece);\n\t}\n\n\tpublic static splitOnMarkupPiecesAndDates(text: string): string[]\n\t{\n\t\t//eslint-disable-next-line no-useless-escape\n\t\tconst pieces: string[] = text.split(/(\\[!![^\\|]+\\|[^_]+_[^!]+!!\\])|(\\d{1,2}-\\d{1,2}-\\d{1,2}:)/); //split on markup and dates\n\t\treturn pieces;\n\t}\n\n\tpublic renderJournal(): JSX.Element | null\n\t{\n\t\tconst pieces: string[] = JournalReaderMachine.splitOnMarkupPiecesAndDates(this.rawText);\n\n\t\treturn <div>\n\t\t\t{\n\t\t\t\tpieces.map((piece: string) => {\n\t\t\t\t\tif (piece === undefined)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn \"\";\n\t\t\t\t\t}\n\t\t\t\t\tif (Markup.isMarkup(piece))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn Markup.getHtmlForMarkup(Markup.create(piece));\n\t\t\t\t\t}\n\t\t\t\t\telse if (JournalReaderMachine.isDate(piece))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn <>\n\t\t\t\t\t\t\t<br/><br/>\n\t\t\t\t\t\t\t{piece}\n\t\t\t\t\t\t</>;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\treturn piece;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t</div>;\n\t}\n\n\t// private replaceMarkupWithDisplayName(rawText: string): string\n\t// {\n\t// \twhile (true)\n\t// \t{\n\t// \t\tlet markup: Markup | null = Markup.create(rawText);\n\t// \t\tif (markup == null)\n\t// \t\t{\n\t// \t\t\tbreak;\n\t// \t\t}\n\t//\n\t// \t\tconst displayName: string | null = markup.displayName;\n\t// \t\tif (displayName == null)\n\t// \t\t{\n\t// \t\t\tconsole.error(\"Invalid markup was received from getFullMarkupFromString\");\n\t// \t\t\treturn \"TODO\"; //TODO\n\t// \t\t}\n\t// \t\trawText = rawText.replace(markup, displayName);\n\t// \t}\n\t// \treturn rawText;\n\t// }\n}\n\n@observer\nexport class JournalReader extends React.Component<JournalReaderProps>\n{\n\tprivate get machine(): JournalReaderMachine\n\t{\n\t\treturn this.props.machine;\n\t}\n\n\trender()\n\t{\n\t\treturn <div className=\"journal-reader\">\n\t\t\t<input type=\"text\" onChange={(e) => this.machine.updateRawText(e.currentTarget.value)}/>\n\t\t\t<br/>\n\t\t\t<br/>\n\n\t\t\t{\n\t\t\t\tthis.machine.rawText != \"\" && \n\t\t\t\tthis.machine.renderJournal()\n\t\t\t}\n\t\t</div>;\n\t}\n}\n","/Users/dirkstahlecker/programming/journal-word-frequencies/client/src/Markup.tsx",[],{"ruleId":"28","severity":1,"message":"29","line":5,"column":8,"nodeType":"30","messageId":"31","endLine":5,"endColumn":23},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"28","severity":1,"message":"36","line":4,"column":37,"nodeType":"30","messageId":"31","endLine":4,"endColumn":48},{"ruleId":"28","severity":1,"message":"37","line":5,"column":9,"nodeType":"30","messageId":"31","endLine":5,"endColumn":20},{"ruleId":"38","severity":1,"message":"39","line":112,"column":26,"nodeType":"40","messageId":"41","endLine":112,"endColumn":28},"@typescript-eslint/no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","no-native-reassign",["42"],"no-negated-in-lhs",["43"],"'runInAction' is defined but never used.","'MarkupUtils' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]