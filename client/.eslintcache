[{"/Users/dirkstahlecker/programming/journal-word-frequencies/client/src/index.tsx":"1","/Users/dirkstahlecker/programming/journal-word-frequencies/client/src/App.tsx":"2","/Users/dirkstahlecker/programming/journal-word-frequencies/client/src/JournalReader.tsx":"3","/Users/dirkstahlecker/programming/journal-word-frequencies/client/src/Markup.tsx":"4","/Users/dirkstahlecker/programming/journal-word-frequencies/client/src/JournalWriter.tsx":"5","/Users/dirkstahlecker/programming/journal-word-frequencies/client/src/NameReference.ts":"6","/Users/dirkstahlecker/programming/journal-word-frequencies/client/src/MarkupUtils.ts":"7","/Users/dirkstahlecker/programming/journal-word-frequencies/client/src/NamePickerModal.tsx":"8","/Users/dirkstahlecker/programming/journal-word-frequencies/client/src/AddMarkupToExistingEntry.tsx":"9"},{"size":503,"mtime":1608506471474,"results":"10","hashOfConfig":"11"},{"size":7335,"mtime":1662317156770,"results":"12","hashOfConfig":"11"},{"size":2546,"mtime":1609269301579,"results":"13","hashOfConfig":"11"},{"size":2060,"mtime":1609269477087,"results":"14","hashOfConfig":"11"},{"size":5952,"mtime":1609276247007,"results":"15","hashOfConfig":"11"},{"size":12446,"mtime":1662317155684,"results":"16","hashOfConfig":"11"},{"size":1378,"mtime":1608509570849,"results":"17","hashOfConfig":"11"},{"size":2967,"mtime":1609275431889,"results":"18","hashOfConfig":"11"},{"size":4630,"mtime":1609275466262,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},"e0owzk",{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"23"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"23"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"23"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"/Users/dirkstahlecker/programming/journal-word-frequencies/client/src/index.tsx",["43"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n",["44","45"],"/Users/dirkstahlecker/programming/journal-word-frequencies/client/src/App.tsx",["46","47","48"],"import React from 'react';\nimport './App.css';\nimport {observer} from \"mobx-react\";\nimport {makeObservable, observable, runInAction, action} from \"mobx\";\nimport { JournalReader, JournalReaderMachine } from './JournalReader';\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\nimport 'react-tabs/style/react-tabs.css';\nimport { JournalWriter, JournalWriterMachine } from './JournalWriter';\nimport { MarkupUtils } from './MarkupUtils';\n\nexport class AppMachine\n{\n  @observable testData: any = null;\n\n  public journalReaderMachine: JournalReaderMachine = new JournalReaderMachine();\n  public journalWriterMachine: JournalWriterMachine = new JournalWriterMachine();\n\n  @observable public selectedFile: any | null = null;\n\n  constructor()\n  {\n    makeObservable(this);\n  }\n\n  public handleEasyMarkupGeneratorSubmit = (): void => {\n    document.getElementById(\"firstName\");\n    const firstName: string | null = (document.getElementById(\"firstName\") as HTMLInputElement).value;\n    const lastName: string = (document.getElementById(\"lastName\") as HTMLInputElement).value;\n    const displayName: string = (document.getElementById(\"displayName\") as HTMLInputElement).value;\n\n    const currentMarkupHack = MarkupUtils.makeMarkup(firstName, lastName, displayName);\n    (document.getElementById(\"placeToSelectText\") as HTMLInputElement).value = currentMarkupHack;\n\n    var copyText = document.getElementById(\"displayCopyArea\") as HTMLElement;\n    // this.selectElementContents(copyText);\n    document.execCommand(\"copy\");\n\n    (document.getElementById(\"firstName\") as HTMLInputElement).value = \"\";\n    (document.getElementById(\"firstName\") as HTMLInputElement).focus();\n    (document.getElementById(\"lastName\") as HTMLInputElement).value = \"\";\n    (document.getElementById(\"displayName\") as HTMLInputElement).value = \"\";\n  };\n}\n\nexport interface AppProps\n{\n\n}\n\n@observer\nclass App extends React.Component<AppProps>\n{\n  private machine: AppMachine = new AppMachine();\n\n  private async getFullNameForDisplayName(): Promise<void>\n  {\n    const raw = await fetch('/api/fullNames/all');\n    const fullNames = await raw.json();\n\n    console.log(fullNames);\n  }\n\n  private async addDisplayName(): Promise<void>\n  {\n    const data = {\n      displayname: \"dirk\",\n      firstname: \"dirk2\",\n      lastname: \"stahlecker2\"\n    };\n\n    const testDataRaw = await fetch('/api/displayName/add', {\n      method: 'POST', // *GET, POST, PUT, DELETE, etc.\n      // mode: 'cors', // no-cors, *cors, same-origin\n      // cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n      // credentials: 'same-origin', // include, *same-origin, omit\n      headers: {\n        'Content-Type': 'application/json'\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      // redirect: 'follow', // manual, *follow, error\n      // referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n      body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n    });\n    const td = await testDataRaw.json();\n\n    // runInAction(() => this.machine.testData = JSON.stringify(td));\n  }\n\n  private async fetchAllDbData(): Promise<void>\n  {\n    const testDataRaw = await fetch('/api/fullNames/all');\n    const td = await testDataRaw.json();\n\n    runInAction(() => this.machine.testData = JSON.stringify(td));\n  }\n\n  componentDidMount()\n  {\n    // this.fetchData();\n  }\n\n  onFileChange = (e: any) => { //TODO\n    // this.setState({ selectedFile: event.target.files[0] });\n    this.machine.selectedFile = e.target.files[0];\n  }; \n\n  onFileUpload = async(): Promise<void> => { \n    // const formData = new FormData(); \n    // formData.append( \n    //   \"myFile\", \n    //   this.state.selectedFile, \n    //   this.state.selectedFile.name \n    // ); \n    // axios.post(\"api/uploadfile\", formData); \n\n    // const requestOptions = {\n    //   method: 'POST',\n    //   headers: { 'Content-Type': 'application/json' },\n    //   body: JSON.stringify({name: this.machine.selectedFile.name, file: this.machine.selectedFile})\n    // }\n\n    // await fetch('/journal/upload', requestOptions);\n    // console.log(\"\")\n\n\n    const formData = new FormData()\n    formData.append('file', this.machine.selectedFile)\n    console.log(this.machine.selectedFile)\n  \n    fetch('/journal/upload', {\n      method: 'POST',\n      body: formData,\n      // headers: {'content-type': 'application/json'},\n      // headers: {'Content-Type': 'multipart/form-data'}\n    })\n    .then(response => response.json())\n    .then(data => {\n      console.log(data)\n    })\n  }; \n\n  render()\n  {\n    return <div className=\"App\">\n      <span style={{width: \"100%\", height: \"100%\", display: \"inline-block\", verticalAlign: \"top\"}}\n            tabIndex={0}\n            id=\"mainApp\"\n      >\n        <Tabs>\n          <TabList>\n            <Tab>\n              Test\n            </Tab>\n            <Tab>\n              Upload\n            </Tab>\n            <Tab>\n              Write\n            </Tab>\n            <Tab>\n              Read\n            </Tab>\n            <Tab>\n              Add Markup\n            </Tab>\n            <Tab>\n              Stats\n            </Tab>\n            <Tab>\n              Graph Testing\n            </Tab>\n          </TabList>\n\n          <TabPanel>\n            <button onClick={() => this.getFullNameForDisplayName()}>Test</button>&nbsp;\n            <button onClick={() => this.fetchAllDbData()}>Get DB Data</button>\n            <br/>\n            {\n              this.machine.testData != null &&\n              this.machine.testData\n            }\n          </TabPanel>\n          <TabPanel>\n            <input type=\"file\" name=\"journal_path\" onChange={this.onFileChange}/>\n            <button onClick={this.onFileUpload}> Upload! </button>\n          </TabPanel>\n          <TabPanel>\n            <JournalWriter machine={this.machine.journalWriterMachine}/>\n          </TabPanel>\n          <TabPanel>\n            <JournalReader machine={this.machine.journalReaderMachine}/>\n          </TabPanel>\n          <TabPanel>\n            <div onKeyDown={(e: any) => {\n              if (e.key === \"Enter\")\n              {\n                e.preventDefault();\n                this.machine.handleEasyMarkupGeneratorSubmit();\n              }\n            }}>\n              First Name: <input type=\"text\" id=\"firstName\" autoFocus={true}/>\n              <br />\n              Last Name: <input type=\"text\" id=\"lastName\" />\n              <br />\n              Display Name: <input type=\"text\" id=\"displayName\" />\n              <br />\n              <button onClick={this.machine.handleEasyMarkupGeneratorSubmit}>Submit</button>\n              <br />\n              <br />\n              <div id=\"displayCopyArea\">\n                <input id=\"placeToSelectText\" />\n              </div>\n            </div>\n          </TabPanel>\n          <TabPanel>\n            {/* <Stats\n              machine={new StatsMachine(\"TODO\")}\n            /> */}\n          </TabPanel>\n          <TabPanel>\n\n          </TabPanel>\n        </Tabs>\n\n      </span>\n    </div>\n  }\n}\n\nexport default App;\n","/Users/dirkstahlecker/programming/journal-word-frequencies/client/src/JournalReader.tsx",["49","50"],"import * as React from \"react\";\n// import {NameReference} from \"./NameReference\";\nimport {observable, action, makeObservable} from \"mobx\";\nimport {observer} from \"mobx-react\";\nimport {MarkupUtils} from \"./MarkupUtils\";\nimport {Markup} from \"./Markup\";\nimport \"./JournalReader.css\";\n\nexport interface JournalReaderProps\n{\n\tmachine: JournalReaderMachine;\n}\n\nexport class JournalReaderMachine\n{\n\tprivate static DATE_REGEX = /\\d{1,2}-\\d{1,2}-\\d{1,2}:/;\n\n\t@observable public rawText: string = \"\";\n\n\tconstructor()\n\t{\n\t\tmakeObservable(this);\n\t}\n\n\t@action\n\tpublic updateRawText(value: string): void\n\t{\n\t\tthis.rawText = value; // = this.replaceMarkupWithDisplayName(value);\n\t}\n\n\tpublic static isDate(piece: string): boolean\n\t{\n\t\treturn JournalReaderMachine.DATE_REGEX.test(piece);\n\t}\n\n\tpublic static splitOnMarkupPiecesAndDates(text: string): string[]\n\t{\n\t\t//eslint-disable-next-line no-useless-escape\n\t\tconst pieces: string[] = text.split(/(\\[!![^\\|]+\\|[^_]+_[^!]+!!\\])|(\\d{1,2}-\\d{1,2}-\\d{1,2}:)/); //split on markup and dates\n\t\treturn pieces;\n\t}\n\n\tpublic renderJournal(): JSX.Element | null\n\t{\n\t\tconst pieces: string[] = JournalReaderMachine.splitOnMarkupPiecesAndDates(this.rawText);\n\n\t\treturn <div>\n\t\t\t{\n\t\t\t\tpieces.map((piece: string) => {\n\t\t\t\t\tif (piece === undefined)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn \"\";\n\t\t\t\t\t}\n\t\t\t\t\tif (Markup.isMarkup(piece))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn Markup.getHtmlForMarkup(Markup.create(piece));\n\t\t\t\t\t}\n\t\t\t\t\telse if (JournalReaderMachine.isDate(piece))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn <>\n\t\t\t\t\t\t\t<br/><br/>\n\t\t\t\t\t\t\t{piece}\n\t\t\t\t\t\t</>;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\treturn piece;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t</div>;\n\t}\n\n\t// private replaceMarkupWithDisplayName(rawText: string): string\n\t// {\n\t// \twhile (true)\n\t// \t{\n\t// \t\tlet markup: Markup | null = Markup.create(rawText);\n\t// \t\tif (markup == null)\n\t// \t\t{\n\t// \t\t\tbreak;\n\t// \t\t}\n\t//\n\t// \t\tconst displayName: string | null = markup.displayName;\n\t// \t\tif (displayName == null)\n\t// \t\t{\n\t// \t\t\tconsole.error(\"Invalid markup was received from getFullMarkupFromString\");\n\t// \t\t\treturn \"TODO\"; //TODO\n\t// \t\t}\n\t// \t\trawText = rawText.replace(markup, displayName);\n\t// \t}\n\t// \treturn rawText;\n\t// }\n}\n\n@observer\nexport class JournalReader extends React.Component<JournalReaderProps>\n{\n\tprivate get machine(): JournalReaderMachine\n\t{\n\t\treturn this.props.machine;\n\t}\n\n\trender()\n\t{\n\t\treturn <div className=\"journal-reader\">\n\t\t\t<input type=\"text\" onChange={(e) => this.machine.updateRawText(e.currentTarget.value)}/>\n\t\t\t<br/>\n\t\t\t<br/>\n\n\t\t\t{\n\t\t\t\tthis.machine.rawText != \"\" && \n\t\t\t\tthis.machine.renderJournal()\n\t\t\t}\n\t\t</div>;\n\t}\n}\n","/Users/dirkstahlecker/programming/journal-word-frequencies/client/src/Markup.tsx",[],"/Users/dirkstahlecker/programming/journal-word-frequencies/client/src/JournalWriter.tsx",[],"/Users/dirkstahlecker/programming/journal-word-frequencies/client/src/NameReference.ts",[],"/Users/dirkstahlecker/programming/journal-word-frequencies/client/src/MarkupUtils.ts",["51"],"// import * as React from 'react';\nimport {Markup} from \"./Markup\";\n\nexport class MarkupUtils\n{\n  public static makeMarkup(firstName: string, lastName: string, displayName: string = \"\"): string\n  {\n      return \"[!!\" + (displayName === \"\" ? firstName : displayName) + \"|\" + firstName + \"_\" + lastName + \"!!]\";\n  }\n\n  // public static getFullMarkupFromString(rawText: string): string | null\n  // {\n  // \tconst pieces: RegExpExecArray | null = MarkupUtils.getMarkupPieces(rawText);\n  // \tif (pieces == null)\n  // \t{\n  // \t\treturn null\n  // \t}\n  // \treturn pieces[0];\n  // }\n\t//\n  // public static getDisplayNameFromMarkup(markup: string): string | null\n  // {\n  // \tconst pieces: RegExpExecArray | null = MarkupUtils.getMarkupPieces(markup);\n  // \tif (pieces == null)\n  // \t{\n  // \t\treturn null\n  // \t}\n  // \treturn pieces[1];\n  // }\n\t//\n  // public static getFirstNameFromMarkup(markup: string): string | null\n  // {\n  // \tconst pieces: RegExpExecArray | null = MarkupUtils.getMarkupPieces(markup);\n  // \tif (pieces == null)\n  // \t{\n  // \t\treturn null\n  // \t}\n  // \treturn pieces[2];\n  // }\n\t//\n  // public static getLastNameFromMarkup(markup: string): string | null\n  // {\n  // \tconst pieces: RegExpExecArray | null = MarkupUtils.getMarkupPieces(markup);\n  // \tif (pieces == null)\n  // \t{\n  // \t\treturn null\n  // \t}\n  // \treturn pieces[3];\n  // }\n}\n\nexport default MarkupUtils;\n","/Users/dirkstahlecker/programming/journal-word-frequencies/client/src/NamePickerModal.tsx",[],"/Users/dirkstahlecker/programming/journal-word-frequencies/client/src/AddMarkupToExistingEntry.tsx",[],{"ruleId":"52","severity":1,"message":"53","line":5,"column":8,"nodeType":"54","messageId":"55","endLine":5,"endColumn":23},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"52","severity":1,"message":"60","line":4,"column":50,"nodeType":"54","messageId":"55","endLine":4,"endColumn":56},{"ruleId":"52","severity":1,"message":"61","line":34,"column":9,"nodeType":"54","messageId":"55","endLine":34,"endColumn":17},{"ruleId":"52","severity":1,"message":"62","line":84,"column":11,"nodeType":"54","messageId":"55","endLine":84,"endColumn":13},{"ruleId":"52","severity":1,"message":"63","line":5,"column":9,"nodeType":"54","messageId":"55","endLine":5,"endColumn":20},{"ruleId":"64","severity":1,"message":"65","line":112,"column":26,"nodeType":"66","messageId":"67","endLine":112,"endColumn":28},{"ruleId":"52","severity":1,"message":"68","line":2,"column":9,"nodeType":"54","messageId":"55","endLine":2,"endColumn":15},"@typescript-eslint/no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","no-native-reassign",["69"],"no-negated-in-lhs",["70"],"'action' is defined but never used.","'copyText' is assigned a value but never used.","'td' is assigned a value but never used.","'MarkupUtils' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Markup' is defined but never used.","no-global-assign","no-unsafe-negation"]